syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
// import "validate/validate.proto";

option go_package = "./etl;mbpb";
option java_multiple_files = false;
option java_package = "com.holder.sqlbuilder.proto";
option java_outer_classname = "MBEtlpbProto";

package mbpb;


service MBetl {

    // 启用
    rpc Enable(EnableRequest)returns(EnableReply){}

    // 禁用
    rpc Disable(Request)returns(Reply){}

    // 运行
    rpc Run(Request)returns(Reply){}

    // 取消
    rpc Cancel(Request)returns(Reply){}

    // 删除
    rpc Remove(Request)returns(Error){}

    // 数据血亲
    rpc DataLineage(Request)returns(Graph){
        option (google.api.http) = {
            get: "/api/v1/flow"
            // body: "*"
        };
    }

    // 任务流启用
    rpc TaskflowEnable(TaskflowRequest)returns(Error){}

    // 查询工作流定义
    rpc GetTaskflowSpec(Identifier)returns(Graph){
        option (google.api.http) = {
            get: "/api/v1/flow/spec"
            // body: "*"
        };
    }

    // 查询工作流状态
    rpc GetTaskflowStatus(Identifier)returns(stream Graph){
        option (google.api.http) = {
            get: "/api/v1/flow/status"
            // body: "*"
        };
    }

    // 单向流
    // rpc CallBack(stream CallBackRequest)returns(Error){}
    
}

message WorkflowReply {
    oneof Reply {
        EnableReply EnableReply = 1;
        Reply FlowReply = 2;
    }
}

message WorkflowRequest {
    oneof Request {
        EnableRequest BaseworkRequest = 1;
        Request FlowRequest = 2;
    }
}

// 任务流请求
message TaskflowRequest {
    int64 FlowID = 1; // 任务流ID
    Crontab Crontab = 2; //运行周期表达式,不能为空
    AcceptAction AcceptAction = 3; // 接受动作
    map<uint64,flowMap> flowMap = 4; // 工作流ID映射
}

// 启用请求
message EnableRequest {
    DBDetail DBInfo = 1; // 数据库信息
    string EnterpriseID = 2; // 企业ID
    int64 CardId = 3; // Card ID
    int64 UserId = 4; // 创建人
    optional Crontab Crontab = 5; //运行周期表达式
    string SqlScript = 6; // SQL代码
    repeated Table Tables = 7; // SQL引用的实体表
    optional Extra Extra = 8; // 附加信息
    optional Over Over = 9; // BI不传
}

message Identifier {
    string EnterpriseID = 1; // 企业ID
    int64 CardId = 2; // Card ID
}

// 启用回复
message EnableReply {
    // 结果表
    Table OutTable = 1;
    // 字段类
    repeated Column Columns = 2;
    // 下次运行时间
    optional string NextRunTime = 3;
    // 错误信息 可选
    optional Error Error = 4;
    // 任务类型
    TaskType TaskType = 5;
    // 流程图 key代表现有工作流ID
    // todo可能存在多个任务流,map 工作流ID
    map<int64,Graph> BeforeFlow = 6;
    // 合并后、或加入后的工作流
    Graph AfterFlow = 7;
    // 确认动作,点击是或否后的动作
    AcceptAction AcceptAction = 8;
    // 工作流ID映射
    map<uint64,flowMap> flowMap = 9;
    // 任务流ID
    int64 FlowID = 10;
}

message flowMap {
    string UUID = 1;
    int64 flowID = 2;
}

enum AcceptAction {
    Nothing = 0; // 无任何动作 
    NewFlow = 1; // 新建工作流
    AppendFlow = 2; // 追加工作流
    MergeFlow = 3; // 合并工作流
}

// 任务类型
enum TaskType {
    basicTask = 0; // 基本任务
    flowTask = 1; // 工作流
}

// 行动请求
message Request {
    string EnterpriseID = 1; // 企业ID
    // int64 CardId = 2 [(validate.rules).int64.gte = 1]; // Card ID
    int64 CardId = 2;
    optional Over Over = 3; // BI不传
}

message Over {
    optional string Hash = 1; // Hash
    optional string SequenceID = 2; // SequenceID
    optional RunType RunType = 3; // 运行类型
    optional google.protobuf.Timestamp StartRunTime = 4; // 开始运行时间
    optional google.protobuf.Timestamp NextRunTime = 5; // 下次运行时间
}

enum RunType {
    Cycle = 0; // 周期
    Spark = 1; // 手动
}

// 行动回复
message Reply {
    optional string Key = 1; // Key
    optional string SequenceID = 2; // 序列ID
    repeated Column Columns = 3; // 字段类
    optional Error Error = 4; // 错误信息 可选
}

message Graph {
    string Id = 1 [json_name = "id"]; // id
    repeated Source Children = 2 [json_name = "children"]; // 节点
    repeated Edge Edges = 3 [json_name = "edges"]; // 边缘
    optional Error Error = 4 [json_name = "error"]; // 错误信息
}

enum SourceType {
    RemoteDB = 0; // 远程数据库
    ImportData = 1; // 导入数据
    DataFill = 2; // 数据填报
    MbEtl = 3; // ETL
    RemoteApi = 4; // RemoteAPI
    UnknownSrc = 999; // 未知
}

// 边缘
message Edge {
    string Id = 1; // 唯一键
    uint64 Source = 2; // 上游
    uint64 Target = 3; // 下游
}

// 来源
message Source {
    uint64 Id = 1; // baseId+type hash BI不传
    string BaseId = 2; // 原始唯一键
    SourceType Type = 3; // 类型
    map<uint64, Property> Prev = 4; // 上级 BI不传
}

message Property {
    string Id = 1; // 原始唯一键
    SourceType Type = 2; // 类型
}

// 实体表
message Table {
    string Schema = 1; // schema
    string Table = 2; // table
    Source Source = 3; // 来源
    Source Target = 4; // 目标 BI不传
}

message Depend {
    Source Source = 1; // 来源
    Source Target = 2; // 目标 
}

// 字段类
message Column {
    string Name = 1;
    string Type = 2;
}

// 运行状态
enum RunStatus {
    Unknown = 0; // 未知
    NotRunning = 2; // 未运行
    Scheme = 4; // 计划中
    Running = 8; // 运行中
    Success = 16; // 运行成功
    Fail = 32; // 运行失败
    Cancel = 64; // 已取消
}

// 数据库信息
message DBDetail {
    string DBType = 1; //数据库类型
    string Host = 2; //数据主机地址
    int32 Port = 3; //数据库端口
    string User = 4; //数据库用户名
    string Pwd = 5; //数据库密码
    string DBName = 6; //数据库名称
    map<string, string> ConnectParams = 7; // 连接参数
}


// 执行一次
message CycleOnce {
    Expression Expression = 1; // 表达式
}

// 间隔时间执行
message CycleEvery {
    EveryExpress EveryExpress = 1; // 间隔周期
    optional Expression Expression = 2; // 表达式
}

// 时间循环周期执行
message CycleEveryTime {
    EveryTimeType EveryType = 1; // 类型
    CycleHour RunTime = 2; // 运行时间
    oneof EveryTime {
        CycleEveryDay EveryDay = 3; // 每天
        CycleEveryWeek EveryWeek = 4; // 每周
        CycleEveryMonth EveryMonth = 5; // 每月
        CycleEveryQuarter EveryQuarter = 6; // 每季
        CycleEveryYear EveryYear = 7; // 每年
    }
}

// 间隔周期
message EveryExpress {
    EveryType CycleType = 1; // 类型
    int32 CycleValue = 2; // Value
}

// 表达式
message Expression {
    string Express = 1; // 表达式
}

// 间隔时间执行类型
enum EveryType {
    EvNone = 0; // 未定义
    EvMinute = 1; // N分钟
    EvHour = 2; // N小时
    EvDay = 3; // N天
    EvWeek = 4; // N周
    EvMonth = 5; // N月
}

// 每天
message CycleEveryDay {
}

// 周枚举
enum EnumWeek {
    Sun = 0; // 周日
    Mon = 1; // 周一
    Tue = 2; // 周二
    Wed = 3; // 周三
    Thu = 4; // 周四
    Fri = 5; // 周五
    Sat = 6; // 周六
}

// 每周
message CycleEveryWeek {
    // 周 切片
    repeated EnumWeek Week = 2;
}

// 每月
message CycleEveryMonth {
    repeated int32 Day = 1; // 天 切片
}

// 月枚举
enum EnumMonth {
    None = 0;
    Jan = 1;
    Feb = 2;
    Mar = 3;
    Apr = 4;
    May = 5;
    Jun = 6;
    Jul = 7;
    Aug = 8;
    Sep = 9;
    Oct = 10;
    Nov = 11;
    Dec = 12;
}

// 月份
message WithMonth {
    // 月份
    EnumMonth Month = 1;
    // 天 切片 -1=最后1天
    repeated int32 Day = 2;
}

// 按年 包含12个月 每个月不同的天
message CycleEveryYear {
    // 月 切片
    repeated WithMonth Month = 1;
}

// 季
message WithQuarter {
    // 第N个月
    int32 Month = 1;
    // 天 切片 -1=最后1天
    repeated int32 Day = 2;
}

// 每季度
message CycleEveryQuarter {
    // 季切片
    repeated WithQuarter Month = 1;
}

// 小时
message CycleHour {
    repeated int32 Hour = 1; // 小时 切片
    repeated int32 Minute = 2; // 分钟 切片
}


// 周期类型
enum EveryTimeType {
    EveryNone = 0; // 未知
    EveryDay = 1; // 每天
    EveryWeek = 2; // 每周
    EveryMonth = 3; // 每月
    EveryQuarter = 4; // 每季
    EveryYear = 5; // 每年
}

// 生命周期
message LifeCycle {
    // 时区
    string Zone = 1;
    // 执行时间
    string StartTime = 2;
    // 结束时间 无限期为null
    optional string EndTime = 3;
}

// Crontab表达式
message Crontab {

    // 调度状态
    bool Enable = 1;

    // 生命周期
    LifeCycle LifeCycle = 2;
    
    // 执行周期
    oneof Cycle {
        // 只执行1次
        CycleOnce CycleOnce = 3;
        // 每隔多久执行一次
        CycleEvery CycleEvery = 4;
        // 时间循环周期执行
        CycleEveryTime CycleEveryTime = 5;
    }
}

// Fully Qualified Name
message FQN {
    string Schema = 1;
    string Table = 2;
    string Column = 3;
}

// 附加信息
message Extra {
    repeated FQN Grouping = 1; // 分组信息
    repeated FQN Selects = 2; // 最外层查询列信息
}

// 错误信息
message Error {
    int32 Code = 1; // 错误码
    string Msg = 2; // 错误信息
}
