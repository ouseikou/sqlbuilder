syntax = "proto3";

package proto;
option go_package = "./proto;proto";

//option java_multiple_files = false;
//option java_package = "com.holder.sqlbuilder.proto";
//option java_outer_classname = "SqlBuilderApiProto";
//import "google/api/annotations.proto";


service SqlBuilderApi {

  rpc Generate (BuilderRequest) returns (CommonResponse) {
    //    option (google.api.http) = {
    //      post: "/api/v1/sqlbuilder",
    //      body: "*"
    //    };
  }
}

enum Driver {
  DRIVER_UNSPECIFIED = 0;
  DRIVER_POSTGRES = 1;
  DRIVER_MYSQL = 2;
  DRIVER_DORIS = 3;
}

enum BuilderStrategy {
  BUILDER_STRATEGY_UNSPECIFIED = 0;
  BUILDER_STRATEGY_MODEL = 1;
  BUILDER_STRATEGY_TEMPLATE = 2;
}

enum CallType {
  CALL_TYPE_UNSPECIFIED = 0;
  CALL_TYPE_AGG = 1;
  CALL_TYPE_INNER = 2;
  CALL_TYPE_CUSTOM = 3;
}


message BuilderRequest {
  repeated DeepWrapper builders = 1;
  Driver driver = 2;
  BuilderStrategy strategy = 3;
}

message DeepWrapper {
  int32 deep = 1;
  MixSql sql = 2;
}

message Expression {
  string call = 1;
  CallType call_type = 2;
  repeated MixVars vars= 3;
  string call_as = 4;
  bool use_as = 5;
}

message Column {
  string field = 1;
  string table = 2;
  string schema = 3;
  string alias = 4;
  bool agg_able = 5;
  bool use_as = 6;
}

message MixSql {
  oneof ref {
    SqlReference model = 1;
    SqlText template = 2;
  }
}

message MixVars {
  oneof vars {
    Column column = 1;
    Expression expression = 2;
    string context = 3;
    int64 number = 4;
  }
}

message MixField {
  oneof mix {
    Column column = 1;
    Expression expression = 2;
  }
}

message SqlText {
  string text = 1;
}

message SqlReference {
  Table from = 1;
  repeated Join join = 2;
  repeated Expression where = 3;
  // GroupBy 可以是 Column 或 Expression
  repeated MixField group_by = 4;
  repeated Expression aggregation = 5;
  // Select 可以是 Column 或 Expression
  repeated MixField select = 6;
  repeated OrderBy order_by = 7;
  optional Limit limit = 8;
}

message CommonResponse {
  int32 code = 1;
  string msg = 2;
  map<string, string> data = 3;
}

message Table {
  string table_name = 1;
  string table_schema = 2;
  string table_alias = 3;
}

message Join {
  string type = 1;
  Table table = 2;
  string left = 3;
  string right = 4;
  string on = 5;
}

message OrderBy {
  MixField dependent = 1;
  string order = 2;
}

message Limit {
  int32 limit_n = 1;
  int32 offset = 2;
}
