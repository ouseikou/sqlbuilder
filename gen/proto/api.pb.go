// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: proto/api.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Driver int32

const (
	Driver_DRIVER_UNSPECIFIED Driver = 0
	Driver_DRIVER_POSTGRES    Driver = 1
	Driver_DRIVER_MYSQL       Driver = 2
	Driver_DRIVER_DORIS       Driver = 3
)

// Enum value maps for Driver.
var (
	Driver_name = map[int32]string{
		0: "DRIVER_UNSPECIFIED",
		1: "DRIVER_POSTGRES",
		2: "DRIVER_MYSQL",
		3: "DRIVER_DORIS",
	}
	Driver_value = map[string]int32{
		"DRIVER_UNSPECIFIED": 0,
		"DRIVER_POSTGRES":    1,
		"DRIVER_MYSQL":       2,
		"DRIVER_DORIS":       3,
	}
)

func (x Driver) Enum() *Driver {
	p := new(Driver)
	*p = x
	return p
}

func (x Driver) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Driver) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_api_proto_enumTypes[0].Descriptor()
}

func (Driver) Type() protoreflect.EnumType {
	return &file_proto_api_proto_enumTypes[0]
}

func (x Driver) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Driver.Descriptor instead.
func (Driver) EnumDescriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{0}
}

type BuilderStrategy int32

const (
	BuilderStrategy_BUILDER_STRATEGY_UNSPECIFIED BuilderStrategy = 0
	BuilderStrategy_BUILDER_STRATEGY_MODEL       BuilderStrategy = 1
	BuilderStrategy_BUILDER_STRATEGY_TEMPLATE    BuilderStrategy = 2
)

// Enum value maps for BuilderStrategy.
var (
	BuilderStrategy_name = map[int32]string{
		0: "BUILDER_STRATEGY_UNSPECIFIED",
		1: "BUILDER_STRATEGY_MODEL",
		2: "BUILDER_STRATEGY_TEMPLATE",
	}
	BuilderStrategy_value = map[string]int32{
		"BUILDER_STRATEGY_UNSPECIFIED": 0,
		"BUILDER_STRATEGY_MODEL":       1,
		"BUILDER_STRATEGY_TEMPLATE":    2,
	}
)

func (x BuilderStrategy) Enum() *BuilderStrategy {
	p := new(BuilderStrategy)
	*p = x
	return p
}

func (x BuilderStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuilderStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_api_proto_enumTypes[1].Descriptor()
}

func (BuilderStrategy) Type() protoreflect.EnumType {
	return &file_proto_api_proto_enumTypes[1]
}

func (x BuilderStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuilderStrategy.Descriptor instead.
func (BuilderStrategy) EnumDescriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{1}
}

type CallType int32

const (
	CallType_CALL_TYPE_UNSPECIFIED CallType = 0
	CallType_CALL_TYPE_AGG         CallType = 1
	CallType_CALL_TYPE_INNER       CallType = 2
	CallType_CALL_TYPE_CUSTOM      CallType = 3
	CallType_CALL_TYPE_ARITH       CallType = 4
	CallType_CALL_TYPE_LITERAL     CallType = 5
)

// Enum value maps for CallType.
var (
	CallType_name = map[int32]string{
		0: "CALL_TYPE_UNSPECIFIED",
		1: "CALL_TYPE_AGG",
		2: "CALL_TYPE_INNER",
		3: "CALL_TYPE_CUSTOM",
		4: "CALL_TYPE_ARITH",
		5: "CALL_TYPE_LITERAL",
	}
	CallType_value = map[string]int32{
		"CALL_TYPE_UNSPECIFIED": 0,
		"CALL_TYPE_AGG":         1,
		"CALL_TYPE_INNER":       2,
		"CALL_TYPE_CUSTOM":      3,
		"CALL_TYPE_ARITH":       4,
		"CALL_TYPE_LITERAL":     5,
	}
)

func (x CallType) Enum() *CallType {
	p := new(CallType)
	*p = x
	return p
}

func (x CallType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_api_proto_enumTypes[2].Descriptor()
}

func (CallType) Type() protoreflect.EnumType {
	return &file_proto_api_proto_enumTypes[2]
}

func (x CallType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallType.Descriptor instead.
func (CallType) EnumDescriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{2}
}

type JoinType int32

const (
	JoinType_JOIN_TYPE_UNSPECIFIED JoinType = 0
	JoinType_JOIN_TYPE_LEFT        JoinType = 1
	JoinType_JOIN_TYPE_RIGHT       JoinType = 2
	JoinType_JOIN_TYPE_INNER       JoinType = 3
	JoinType_JOIN_TYPE_FULL        JoinType = 4
	JoinType_JOIN_TYPE_CROSS       JoinType = 5
)

// Enum value maps for JoinType.
var (
	JoinType_name = map[int32]string{
		0: "JOIN_TYPE_UNSPECIFIED",
		1: "JOIN_TYPE_LEFT",
		2: "JOIN_TYPE_RIGHT",
		3: "JOIN_TYPE_INNER",
		4: "JOIN_TYPE_FULL",
		5: "JOIN_TYPE_CROSS",
	}
	JoinType_value = map[string]int32{
		"JOIN_TYPE_UNSPECIFIED": 0,
		"JOIN_TYPE_LEFT":        1,
		"JOIN_TYPE_RIGHT":       2,
		"JOIN_TYPE_INNER":       3,
		"JOIN_TYPE_FULL":        4,
		"JOIN_TYPE_CROSS":       5,
	}
)

func (x JoinType) Enum() *JoinType {
	p := new(JoinType)
	*p = x
	return p
}

func (x JoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_api_proto_enumTypes[3].Descriptor()
}

func (JoinType) Type() protoreflect.EnumType {
	return &file_proto_api_proto_enumTypes[3]
}

func (x JoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinType.Descriptor instead.
func (JoinType) EnumDescriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{3}
}

type Logic int32

const (
	Logic_LOGIC_UNSPECIFIED Logic = 0
	Logic_LOGIC_AND         Logic = 1
	Logic_LOGIC_OR          Logic = 2
	Logic_LOGIC_NOT         Logic = 3
)

// Enum value maps for Logic.
var (
	Logic_name = map[int32]string{
		0: "LOGIC_UNSPECIFIED",
		1: "LOGIC_AND",
		2: "LOGIC_OR",
		3: "LOGIC_NOT",
	}
	Logic_value = map[string]int32{
		"LOGIC_UNSPECIFIED": 0,
		"LOGIC_AND":         1,
		"LOGIC_OR":          2,
		"LOGIC_NOT":         3,
	}
)

func (x Logic) Enum() *Logic {
	p := new(Logic)
	*p = x
	return p
}

func (x Logic) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Logic) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_api_proto_enumTypes[4].Descriptor()
}

func (Logic) Type() protoreflect.EnumType {
	return &file_proto_api_proto_enumTypes[4]
}

func (x Logic) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Logic.Descriptor instead.
func (Logic) EnumDescriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{4}
}

type Op int32

const (
	Op_OP_UNSPECIFIED Op = 0  // 默认值或未定义状态
	Op_OP_EQ          Op = 1  // "="
	Op_OP_NEQ         Op = 2  // "<>"
	Op_OP_LT          Op = 3  // "<"
	Op_OP_LTE         Op = 4  // "<="
	Op_OP_GT          Op = 5  // ">"
	Op_OP_GTE         Op = 6  // ">="
	Op_OP_LIKE        Op = 7  // "like"
	Op_OP_NOT_LIKE    Op = 8  // "not like", like && reverse=true
	Op_OP_PREFIX_LIKE Op = 9  // "left like = %s模糊"
	Op_OP_LIKE_SUFFIX Op = 10 // like right = 模糊%s"
	Op_OP_BETWEEN     Op = 11 // "between"
	Op_OP_IN          Op = 12 // "in"
	Op_OP_NOT_IN      Op = 13 // "not in"
	Op_OP_IS_NULL     Op = 14 // "is null"
	Op_OP_IS_NOT_NULL Op = 15 // "is not null"
	Op_OP_AND         Op = 16 // "or"
	Op_OP_OR          Op = 17 // "and"
)

// Enum value maps for Op.
var (
	Op_name = map[int32]string{
		0:  "OP_UNSPECIFIED",
		1:  "OP_EQ",
		2:  "OP_NEQ",
		3:  "OP_LT",
		4:  "OP_LTE",
		5:  "OP_GT",
		6:  "OP_GTE",
		7:  "OP_LIKE",
		8:  "OP_NOT_LIKE",
		9:  "OP_PREFIX_LIKE",
		10: "OP_LIKE_SUFFIX",
		11: "OP_BETWEEN",
		12: "OP_IN",
		13: "OP_NOT_IN",
		14: "OP_IS_NULL",
		15: "OP_IS_NOT_NULL",
		16: "OP_AND",
		17: "OP_OR",
	}
	Op_value = map[string]int32{
		"OP_UNSPECIFIED": 0,
		"OP_EQ":          1,
		"OP_NEQ":         2,
		"OP_LT":          3,
		"OP_LTE":         4,
		"OP_GT":          5,
		"OP_GTE":         6,
		"OP_LIKE":        7,
		"OP_NOT_LIKE":    8,
		"OP_PREFIX_LIKE": 9,
		"OP_LIKE_SUFFIX": 10,
		"OP_BETWEEN":     11,
		"OP_IN":          12,
		"OP_NOT_IN":      13,
		"OP_IS_NULL":     14,
		"OP_IS_NOT_NULL": 15,
		"OP_AND":         16,
		"OP_OR":          17,
	}
)

func (x Op) Enum() *Op {
	p := new(Op)
	*p = x
	return p
}

func (x Op) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Op) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_api_proto_enumTypes[5].Descriptor()
}

func (Op) Type() protoreflect.EnumType {
	return &file_proto_api_proto_enumTypes[5]
}

func (x Op) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Op.Descriptor instead.
func (Op) EnumDescriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{5}
}

type CommonResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data          map[string]string      `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommonResponse) Reset() {
	*x = CommonResponse{}
	mi := &file_proto_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResponse) ProtoMessage() {}

func (x *CommonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResponse.ProtoReflect.Descriptor instead.
func (*CommonResponse) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{0}
}

func (x *CommonResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CommonResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CommonResponse) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type BuilderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Builders      []*DeepWrapper         `protobuf:"bytes,1,rep,name=builders,proto3" json:"builders,omitempty"`
	Driver        Driver                 `protobuf:"varint,2,opt,name=driver,proto3,enum=proto.Driver" json:"driver,omitempty"`
	Strategy      BuilderStrategy        `protobuf:"varint,3,opt,name=strategy,proto3,enum=proto.BuilderStrategy" json:"strategy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BuilderRequest) Reset() {
	*x = BuilderRequest{}
	mi := &file_proto_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuilderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuilderRequest) ProtoMessage() {}

func (x *BuilderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuilderRequest.ProtoReflect.Descriptor instead.
func (*BuilderRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{1}
}

func (x *BuilderRequest) GetBuilders() []*DeepWrapper {
	if x != nil {
		return x.Builders
	}
	return nil
}

func (x *BuilderRequest) GetDriver() Driver {
	if x != nil {
		return x.Driver
	}
	return Driver_DRIVER_UNSPECIFIED
}

func (x *BuilderRequest) GetStrategy() BuilderStrategy {
	if x != nil {
		return x.Strategy
	}
	return BuilderStrategy_BUILDER_STRATEGY_UNSPECIFIED
}

type DeepWrapper struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Deep          int32                  `protobuf:"varint,1,opt,name=deep,proto3" json:"deep,omitempty"`
	Sql           *MixSql                `protobuf:"bytes,2,opt,name=sql,proto3" json:"sql,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeepWrapper) Reset() {
	*x = DeepWrapper{}
	mi := &file_proto_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeepWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeepWrapper) ProtoMessage() {}

func (x *DeepWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeepWrapper.ProtoReflect.Descriptor instead.
func (*DeepWrapper) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{2}
}

func (x *DeepWrapper) GetDeep() int32 {
	if x != nil {
		return x.Deep
	}
	return 0
}

func (x *DeepWrapper) GetSql() *MixSql {
	if x != nil {
		return x.Sql
	}
	return nil
}

type MixSql struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Ref:
	//
	//	*MixSql_Model
	//	*MixSql_Template
	Ref           isMixSql_Ref `protobuf_oneof:"ref"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MixSql) Reset() {
	*x = MixSql{}
	mi := &file_proto_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MixSql) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixSql) ProtoMessage() {}

func (x *MixSql) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixSql.ProtoReflect.Descriptor instead.
func (*MixSql) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{3}
}

func (x *MixSql) GetRef() isMixSql_Ref {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *MixSql) GetModel() *SqlReference {
	if x != nil {
		if x, ok := x.Ref.(*MixSql_Model); ok {
			return x.Model
		}
	}
	return nil
}

func (x *MixSql) GetTemplate() *SqlText {
	if x != nil {
		if x, ok := x.Ref.(*MixSql_Template); ok {
			return x.Template
		}
	}
	return nil
}

type isMixSql_Ref interface {
	isMixSql_Ref()
}

type MixSql_Model struct {
	Model *SqlReference `protobuf:"bytes,1,opt,name=model,proto3,oneof"`
}

type MixSql_Template struct {
	Template *SqlText `protobuf:"bytes,2,opt,name=template,proto3,oneof"`
}

func (*MixSql_Model) isMixSql_Ref() {}

func (*MixSql_Template) isMixSql_Ref() {}

type SqlText struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Text          string                  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Args          map[string]*TemplateArg `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SqlText) Reset() {
	*x = SqlText{}
	mi := &file_proto_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SqlText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlText) ProtoMessage() {}

func (x *SqlText) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlText.ProtoReflect.Descriptor instead.
func (*SqlText) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{4}
}

func (x *SqlText) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SqlText) GetArgs() map[string]*TemplateArg {
	if x != nil {
		return x.Args
	}
	return nil
}

type SqlReference struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// todo Table -> MixTable, 或者使用 optional 兼容参考 LogicGroup
	From  *MixTable   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Join  []*Join     `protobuf:"bytes,2,rep,name=join,proto3" json:"join,omitempty"`
	Where []*MixWhere `protobuf:"bytes,3,rep,name=where,proto3" json:"where,omitempty"`
	// GroupBy 可以是 Column 或 Expression
	GroupBy     []*MixField   `protobuf:"bytes,4,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Aggregation []*Expression `protobuf:"bytes,5,rep,name=aggregation,proto3" json:"aggregation,omitempty"`
	// Select 可以是 Column 或 Expression
	Select  []*MixField `protobuf:"bytes,6,rep,name=select,proto3" json:"select,omitempty"`
	OrderBy []*OrderBy  `protobuf:"bytes,7,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Limit   *Limit      `protobuf:"bytes,8,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// 新结构(where 递归树表达), 优先级>MixWhere(2)
	// 不适用于过往 where-cond 条件之间逻辑处理, 要求明确指定逻辑分组, 不同逻辑只能是不同分组
	// 因此需要单独查询一次构造 where-group-cond
	LogicWhere    *LogicGroup `protobuf:"bytes,9,opt,name=logic_where,json=logicWhere,proto3,oneof" json:"logic_where,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SqlReference) Reset() {
	*x = SqlReference{}
	mi := &file_proto_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SqlReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlReference) ProtoMessage() {}

func (x *SqlReference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlReference.ProtoReflect.Descriptor instead.
func (*SqlReference) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{5}
}

func (x *SqlReference) GetFrom() *MixTable {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *SqlReference) GetJoin() []*Join {
	if x != nil {
		return x.Join
	}
	return nil
}

func (x *SqlReference) GetWhere() []*MixWhere {
	if x != nil {
		return x.Where
	}
	return nil
}

func (x *SqlReference) GetGroupBy() []*MixField {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *SqlReference) GetAggregation() []*Expression {
	if x != nil {
		return x.Aggregation
	}
	return nil
}

func (x *SqlReference) GetSelect() []*MixField {
	if x != nil {
		return x.Select
	}
	return nil
}

func (x *SqlReference) GetOrderBy() []*OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *SqlReference) GetLimit() *Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *SqlReference) GetLogicWhere() *LogicGroup {
	if x != nil {
		return x.LogicWhere
	}
	return nil
}

type Table struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TableName     string                 `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	TableSchema   string                 `protobuf:"bytes,2,opt,name=table_schema,json=tableSchema,proto3" json:"table_schema,omitempty"`
	TableAlias    string                 `protobuf:"bytes,3,opt,name=table_alias,json=tableAlias,proto3" json:"table_alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Table) Reset() {
	*x = Table{}
	mi := &file_proto_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{6}
}

func (x *Table) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *Table) GetTableSchema() string {
	if x != nil {
		return x.TableSchema
	}
	return ""
}

func (x *Table) GetTableAlias() string {
	if x != nil {
		return x.TableAlias
	}
	return ""
}

type LiteralTable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SubLiteral    *StringLiteral         `protobuf:"bytes,1,opt,name=sub_literal,json=subLiteral,proto3" json:"sub_literal,omitempty"`
	LiteralAlias  string                 `protobuf:"bytes,2,opt,name=literal_alias,json=literalAlias,proto3" json:"literal_alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiteralTable) Reset() {
	*x = LiteralTable{}
	mi := &file_proto_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiteralTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiteralTable) ProtoMessage() {}

func (x *LiteralTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiteralTable.ProtoReflect.Descriptor instead.
func (*LiteralTable) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{7}
}

func (x *LiteralTable) GetSubLiteral() *StringLiteral {
	if x != nil {
		return x.SubLiteral
	}
	return nil
}

func (x *LiteralTable) GetLiteralAlias() string {
	if x != nil {
		return x.LiteralAlias
	}
	return ""
}

type MixTable struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Mt:
	//
	//	*MixTable_NormalTable
	//	*MixTable_LiteralTable
	Mt            isMixTable_Mt `protobuf_oneof:"mt"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MixTable) Reset() {
	*x = MixTable{}
	mi := &file_proto_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MixTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixTable) ProtoMessage() {}

func (x *MixTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixTable.ProtoReflect.Descriptor instead.
func (*MixTable) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{8}
}

func (x *MixTable) GetMt() isMixTable_Mt {
	if x != nil {
		return x.Mt
	}
	return nil
}

func (x *MixTable) GetNormalTable() *Table {
	if x != nil {
		if x, ok := x.Mt.(*MixTable_NormalTable); ok {
			return x.NormalTable
		}
	}
	return nil
}

func (x *MixTable) GetLiteralTable() *LiteralTable {
	if x != nil {
		if x, ok := x.Mt.(*MixTable_LiteralTable); ok {
			return x.LiteralTable
		}
	}
	return nil
}

type isMixTable_Mt interface {
	isMixTable_Mt()
}

type MixTable_NormalTable struct {
	NormalTable *Table `protobuf:"bytes,1,opt,name=normal_table,json=normalTable,proto3,oneof"`
}

type MixTable_LiteralTable struct {
	LiteralTable *LiteralTable `protobuf:"bytes,2,opt,name=literal_table,json=literalTable,proto3,oneof"`
}

func (*MixTable_NormalTable) isMixTable_Mt() {}

func (*MixTable_LiteralTable) isMixTable_Mt() {}

type Join struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  JoinType               `protobuf:"varint,1,opt,name=type,proto3,enum=proto.JoinType" json:"type,omitempty"`
	// todo Table -> MixTable
	Table         *MixTable   `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	JoinCond      []*JoinCond `protobuf:"bytes,3,rep,name=joinCond,proto3" json:"joinCond,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Join) Reset() {
	*x = Join{}
	mi := &file_proto_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Join) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Join) ProtoMessage() {}

func (x *Join) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Join.ProtoReflect.Descriptor instead.
func (*Join) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{9}
}

func (x *Join) GetType() JoinType {
	if x != nil {
		return x.Type
	}
	return JoinType_JOIN_TYPE_UNSPECIFIED
}

func (x *Join) GetTable() *MixTable {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *Join) GetJoinCond() []*JoinCond {
	if x != nil {
		return x.JoinCond
	}
	return nil
}

type JoinCond struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Mix:
	//
	//	*JoinCond_OnField
	//	*JoinCond_OnCond
	Mix           isJoinCond_Mix `protobuf_oneof:"mix"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinCond) Reset() {
	*x = JoinCond{}
	mi := &file_proto_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinCond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinCond) ProtoMessage() {}

func (x *JoinCond) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinCond.ProtoReflect.Descriptor instead.
func (*JoinCond) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{10}
}

func (x *JoinCond) GetMix() isJoinCond_Mix {
	if x != nil {
		return x.Mix
	}
	return nil
}

func (x *JoinCond) GetOnField() *OnField {
	if x != nil {
		if x, ok := x.Mix.(*JoinCond_OnField); ok {
			return x.OnField
		}
	}
	return nil
}

func (x *JoinCond) GetOnCond() *Condition {
	if x != nil {
		if x, ok := x.Mix.(*JoinCond_OnCond); ok {
			return x.OnCond
		}
	}
	return nil
}

type isJoinCond_Mix interface {
	isJoinCond_Mix()
}

type JoinCond_OnField struct {
	OnField *OnField `protobuf:"bytes,1,opt,name=onField,proto3,oneof"`
}

type JoinCond_OnCond struct {
	OnCond *Condition `protobuf:"bytes,2,opt,name=onCond,proto3,oneof"`
}

func (*JoinCond_OnField) isJoinCond_Mix() {}

func (*JoinCond_OnCond) isJoinCond_Mix() {}

type OnField struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Left          *MixField              `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Right         *MixField              `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
	On            Op                     `protobuf:"varint,3,opt,name=on,proto3,enum=proto.Op" json:"on,omitempty"`
	Logic         Logic                  `protobuf:"varint,4,opt,name=logic,proto3,enum=proto.Logic" json:"logic,omitempty"` // 和下一个条件的逻辑关系, 默认 and, 可选or
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnField) Reset() {
	*x = OnField{}
	mi := &file_proto_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnField) ProtoMessage() {}

func (x *OnField) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnField.ProtoReflect.Descriptor instead.
func (*OnField) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{11}
}

func (x *OnField) GetLeft() *MixField {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *OnField) GetRight() *MixField {
	if x != nil {
		return x.Right
	}
	return nil
}

func (x *OnField) GetOn() Op {
	if x != nil {
		return x.On
	}
	return Op_OP_UNSPECIFIED
}

func (x *OnField) GetLogic() Logic {
	if x != nil {
		return x.Logic
	}
	return Logic_LOGIC_UNSPECIFIED
}

type OrderBy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dependent     *MixField              `protobuf:"bytes,1,opt,name=dependent,proto3" json:"dependent,omitempty"`
	Order         string                 `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBy) Reset() {
	*x = OrderBy{}
	mi := &file_proto_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBy) ProtoMessage() {}

func (x *OrderBy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBy.ProtoReflect.Descriptor instead.
func (*OrderBy) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{12}
}

func (x *OrderBy) GetDependent() *MixField {
	if x != nil {
		return x.Dependent
	}
	return nil
}

func (x *OrderBy) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type Limit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LimitN        int32                  `protobuf:"varint,1,opt,name=limit_n,json=limitN,proto3" json:"limit_n,omitempty"`
	Offset        int32                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Limit) Reset() {
	*x = Limit{}
	mi := &file_proto_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Limit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Limit) ProtoMessage() {}

func (x *Limit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Limit.ProtoReflect.Descriptor instead.
func (*Limit) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{13}
}

func (x *Limit) GetLimitN() int32 {
	if x != nil {
		return x.LimitN
	}
	return 0
}

func (x *Limit) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type Column struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Table         string                 `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Schema        string                 `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	Alias         string                 `protobuf:"bytes,4,opt,name=alias,proto3" json:"alias,omitempty"`
	AggAble       bool                   `protobuf:"varint,5,opt,name=agg_able,json=aggAble,proto3" json:"agg_able,omitempty"`
	UseAs         bool                   `protobuf:"varint,6,opt,name=use_as,json=useAs,proto3" json:"use_as,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Column) Reset() {
	*x = Column{}
	mi := &file_proto_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{14}
}

func (x *Column) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *Column) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *Column) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *Column) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Column) GetAggAble() bool {
	if x != nil {
		return x.AggAble
	}
	return false
}

func (x *Column) GetUseAs() bool {
	if x != nil {
		return x.UseAs
	}
	return false
}

// 表达式不在vars使用类似递归, 而是平铺可能好点. ExpressionWrapper{int32 deep = 1; repeated Expression exps = 2;}
type Expression struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Call     string                 `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
	CallType CallType               `protobuf:"varint,2,opt,name=call_type,json=callType,proto3,enum=proto.CallType" json:"call_type,omitempty"`
	Vars     []*MixVars             `protobuf:"bytes,3,rep,name=vars,proto3" json:"vars,omitempty"`
	CallAs   string                 `protobuf:"bytes,4,opt,name=call_as,json=callAs,proto3" json:"call_as,omitempty"`
	UseAs    bool                   `protobuf:"varint,5,opt,name=use_as,json=useAs,proto3" json:"use_as,omitempty"`
	// 表达式是否加小括号, 新增 pnt-format
	UsePnt bool `protobuf:"varint,6,opt,name=use_pnt,json=usePnt,proto3" json:"use_pnt,omitempty"`
	// 处理极其复杂的表达式或公式, 调用方直接将字面量片段给到 sqlbuilder, 不做任何处理
	StrLiteral    *StringLiteral `protobuf:"bytes,7,opt,name=str_literal,json=strLiteral,proto3,oneof" json:"str_literal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Expression) Reset() {
	*x = Expression{}
	mi := &file_proto_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{15}
}

func (x *Expression) GetCall() string {
	if x != nil {
		return x.Call
	}
	return ""
}

func (x *Expression) GetCallType() CallType {
	if x != nil {
		return x.CallType
	}
	return CallType_CALL_TYPE_UNSPECIFIED
}

func (x *Expression) GetVars() []*MixVars {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *Expression) GetCallAs() string {
	if x != nil {
		return x.CallAs
	}
	return ""
}

func (x *Expression) GetUseAs() bool {
	if x != nil {
		return x.UseAs
	}
	return false
}

func (x *Expression) GetUsePnt() bool {
	if x != nil {
		return x.UsePnt
	}
	return false
}

func (x *Expression) GetStrLiteral() *StringLiteral {
	if x != nil {
		return x.StrLiteral
	}
	return nil
}

type MixVars struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Vars:
	//
	//	*MixVars_Column
	//	*MixVars_Expression
	//	*MixVars_MultiCondition
	//	*MixVars_LogicCondition
	//	*MixVars_Context
	//	*MixVars_Number
	//	*MixVars_DoubleNum
	//	*MixVars_StrLiteral
	Vars          isMixVars_Vars `protobuf_oneof:"vars"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MixVars) Reset() {
	*x = MixVars{}
	mi := &file_proto_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MixVars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixVars) ProtoMessage() {}

func (x *MixVars) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixVars.ProtoReflect.Descriptor instead.
func (*MixVars) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{16}
}

func (x *MixVars) GetVars() isMixVars_Vars {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *MixVars) GetColumn() *Column {
	if x != nil {
		if x, ok := x.Vars.(*MixVars_Column); ok {
			return x.Column
		}
	}
	return nil
}

func (x *MixVars) GetExpression() *Expression {
	if x != nil {
		if x, ok := x.Vars.(*MixVars_Expression); ok {
			return x.Expression
		}
	}
	return nil
}

func (x *MixVars) GetMultiCondition() *MultiCondition {
	if x != nil {
		if x, ok := x.Vars.(*MixVars_MultiCondition); ok {
			return x.MultiCondition
		}
	}
	return nil
}

func (x *MixVars) GetLogicCondition() *LogicGroup {
	if x != nil {
		if x, ok := x.Vars.(*MixVars_LogicCondition); ok {
			return x.LogicCondition
		}
	}
	return nil
}

func (x *MixVars) GetContext() string {
	if x != nil {
		if x, ok := x.Vars.(*MixVars_Context); ok {
			return x.Context
		}
	}
	return ""
}

func (x *MixVars) GetNumber() int64 {
	if x != nil {
		if x, ok := x.Vars.(*MixVars_Number); ok {
			return x.Number
		}
	}
	return 0
}

func (x *MixVars) GetDoubleNum() float64 {
	if x != nil {
		if x, ok := x.Vars.(*MixVars_DoubleNum); ok {
			return x.DoubleNum
		}
	}
	return 0
}

func (x *MixVars) GetStrLiteral() *StringLiteral {
	if x != nil {
		if x, ok := x.Vars.(*MixVars_StrLiteral); ok {
			return x.StrLiteral
		}
	}
	return nil
}

type isMixVars_Vars interface {
	isMixVars_Vars()
}

type MixVars_Column struct {
	Column *Column `protobuf:"bytes,1,opt,name=column,proto3,oneof"`
}

type MixVars_Expression struct {
	Expression *Expression `protobuf:"bytes,2,opt,name=expression,proto3,oneof"`
}

type MixVars_MultiCondition struct {
	MultiCondition *MultiCondition `protobuf:"bytes,4,opt,name=multi_condition,json=multiCondition,proto3,oneof"`
}

type MixVars_LogicCondition struct {
	// todo 暂未适配
	LogicCondition *LogicGroup `protobuf:"bytes,5,opt,name=logic_condition,json=logicCondition,proto3,oneof"`
}

type MixVars_Context struct {
	Context string `protobuf:"bytes,6,opt,name=context,proto3,oneof"`
}

type MixVars_Number struct {
	Number int64 `protobuf:"varint,7,opt,name=number,proto3,oneof"`
}

type MixVars_DoubleNum struct {
	DoubleNum float64 `protobuf:"fixed64,8,opt,name=double_num,json=doubleNum,proto3,oneof"`
}

type MixVars_StrLiteral struct {
	StrLiteral *StringLiteral `protobuf:"bytes,9,opt,name=str_literal,json=strLiteral,proto3,oneof"` // 字符串字面量不会默认加单引号
}

func (*MixVars_Column) isMixVars_Vars() {}

func (*MixVars_Expression) isMixVars_Vars() {}

func (*MixVars_MultiCondition) isMixVars_Vars() {}

func (*MixVars_LogicCondition) isMixVars_Vars() {}

func (*MixVars_Context) isMixVars_Vars() {}

func (*MixVars_Number) isMixVars_Vars() {}

func (*MixVars_DoubleNum) isMixVars_Vars() {}

func (*MixVars_StrLiteral) isMixVars_Vars() {}

// todo  未处理: 添加 Condition 会导致递归嵌套
// SELECT array_length(array_column, 1) > 0 FROM my_table; SELECT NOT column_name FROM my_table; => Condition
type MixField struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Mix:
	//
	//	*MixField_Column
	//	*MixField_Expression
	//	*MixField_CaseWhen
	Mix           isMixField_Mix `protobuf_oneof:"mix"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MixField) Reset() {
	*x = MixField{}
	mi := &file_proto_api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MixField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixField) ProtoMessage() {}

func (x *MixField) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixField.ProtoReflect.Descriptor instead.
func (*MixField) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{17}
}

func (x *MixField) GetMix() isMixField_Mix {
	if x != nil {
		return x.Mix
	}
	return nil
}

func (x *MixField) GetColumn() *Column {
	if x != nil {
		if x, ok := x.Mix.(*MixField_Column); ok {
			return x.Column
		}
	}
	return nil
}

func (x *MixField) GetExpression() *Expression {
	if x != nil {
		if x, ok := x.Mix.(*MixField_Expression); ok {
			return x.Expression
		}
	}
	return nil
}

func (x *MixField) GetCaseWhen() *CaseWhen {
	if x != nil {
		if x, ok := x.Mix.(*MixField_CaseWhen); ok {
			return x.CaseWhen
		}
	}
	return nil
}

type isMixField_Mix interface {
	isMixField_Mix()
}

type MixField_Column struct {
	Column *Column `protobuf:"bytes,1,opt,name=column,proto3,oneof"`
}

type MixField_Expression struct {
	Expression *Expression `protobuf:"bytes,2,opt,name=expression,proto3,oneof"`
}

type MixField_CaseWhen struct {
	CaseWhen *CaseWhen `protobuf:"bytes,3,opt,name=case_when,json=caseWhen,proto3,oneof"`
}

func (*MixField_Column) isMixField_Mix() {}

func (*MixField_Expression) isMixField_Mix() {}

func (*MixField_CaseWhen) isMixField_Mix() {}

type CaseWhen struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Conditions    []*CaseWhenItem        `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	ElseValue     *BasicData             `protobuf:"bytes,2,opt,name=else_value,json=elseValue,proto3" json:"else_value,omitempty"`
	Alias         string                 `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	UseAs         bool                   `protobuf:"varint,4,opt,name=use_as,json=useAs,proto3" json:"use_as,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CaseWhen) Reset() {
	*x = CaseWhen{}
	mi := &file_proto_api_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaseWhen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseWhen) ProtoMessage() {}

func (x *CaseWhen) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseWhen.ProtoReflect.Descriptor instead.
func (*CaseWhen) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{18}
}

func (x *CaseWhen) GetConditions() []*CaseWhenItem {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *CaseWhen) GetElseValue() *BasicData {
	if x != nil {
		return x.ElseValue
	}
	return nil
}

func (x *CaseWhen) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *CaseWhen) GetUseAs() bool {
	if x != nil {
		return x.UseAs
	}
	return false
}

// 每一行 case-when-then就是多个条件组成的语句
type CaseWhenItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	When          []*MixWhere            `protobuf:"bytes,1,rep,name=when,proto3" json:"when,omitempty"`
	Then          *BasicData             `protobuf:"bytes,2,opt,name=then,proto3" json:"then,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CaseWhenItem) Reset() {
	*x = CaseWhenItem{}
	mi := &file_proto_api_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaseWhenItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseWhenItem) ProtoMessage() {}

func (x *CaseWhenItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseWhenItem.ProtoReflect.Descriptor instead.
func (*CaseWhenItem) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{19}
}

func (x *CaseWhenItem) GetWhen() []*MixWhere {
	if x != nil {
		return x.When
	}
	return nil
}

func (x *CaseWhenItem) GetThen() *BasicData {
	if x != nil {
		return x.Then
	}
	return nil
}

// 多个条件组合
type MultiCondition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Conditions    []*MixWhere            `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultiCondition) Reset() {
	*x = MultiCondition{}
	mi := &file_proto_api_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiCondition) ProtoMessage() {}

func (x *MultiCondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiCondition.ProtoReflect.Descriptor instead.
func (*MultiCondition) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{20}
}

func (x *MultiCondition) GetConditions() []*MixWhere {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type LogicNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Node:
	//
	//	*LogicNode_Group
	//	*LogicNode_Leaf
	Node          isLogicNode_Node `protobuf_oneof:"node"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogicNode) Reset() {
	*x = LogicNode{}
	mi := &file_proto_api_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogicNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicNode) ProtoMessage() {}

func (x *LogicNode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicNode.ProtoReflect.Descriptor instead.
func (*LogicNode) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{21}
}

func (x *LogicNode) GetNode() isLogicNode_Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *LogicNode) GetGroup() *LogicGroup {
	if x != nil {
		if x, ok := x.Node.(*LogicNode_Group); ok {
			return x.Group
		}
	}
	return nil
}

func (x *LogicNode) GetLeaf() *MixWhere {
	if x != nil {
		if x, ok := x.Node.(*LogicNode_Leaf); ok {
			return x.Leaf
		}
	}
	return nil
}

type isLogicNode_Node interface {
	isLogicNode_Node()
}

type LogicNode_Group struct {
	Group *LogicGroup `protobuf:"bytes,1,opt,name=group,proto3,oneof"` // 一个逻辑组合（AND/OR）递归结构
}

type LogicNode_Leaf struct {
	Leaf *MixWhere `protobuf:"bytes,2,opt,name=leaf,proto3,oneof"` // 一个条件：Condition 或 Expression
}

func (*LogicNode_Group) isLogicNode_Node() {}

func (*LogicNode_Leaf) isLogicNode_Node() {}

type LogicGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Logic         Logic                  `protobuf:"varint,1,opt,name=logic,proto3,enum=proto.Logic" json:"logic,omitempty"` // 当前 group 的逻辑操作（AND / OR）
	Children      []*LogicNode           `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`             // 子节点（可继续是 group 或 leaf）
	UsePnt        bool                   `protobuf:"varint,3,opt,name=use_pnt,json=usePnt,proto3" json:"use_pnt,omitempty"`  // 是否加括号包裹整个 group
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogicGroup) Reset() {
	*x = LogicGroup{}
	mi := &file_proto_api_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogicGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicGroup) ProtoMessage() {}

func (x *LogicGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicGroup.ProtoReflect.Descriptor instead.
func (*LogicGroup) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{22}
}

func (x *LogicGroup) GetLogic() Logic {
	if x != nil {
		return x.Logic
	}
	return Logic_LOGIC_UNSPECIFIED
}

func (x *LogicGroup) GetChildren() []*LogicNode {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *LogicGroup) GetUsePnt() bool {
	if x != nil {
		return x.UsePnt
	}
	return false
}

type MixWhere struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Filter:
	//
	//	*MixWhere_Condition
	//	*MixWhere_Expression
	Filter        isMixWhere_Filter `protobuf_oneof:"filter"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MixWhere) Reset() {
	*x = MixWhere{}
	mi := &file_proto_api_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MixWhere) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixWhere) ProtoMessage() {}

func (x *MixWhere) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixWhere.ProtoReflect.Descriptor instead.
func (*MixWhere) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{23}
}

func (x *MixWhere) GetFilter() isMixWhere_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *MixWhere) GetCondition() *Condition {
	if x != nil {
		if x, ok := x.Filter.(*MixWhere_Condition); ok {
			return x.Condition
		}
	}
	return nil
}

func (x *MixWhere) GetExpression() *Expression {
	if x != nil {
		if x, ok := x.Filter.(*MixWhere_Expression); ok {
			return x.Expression
		}
	}
	return nil
}

type isMixWhere_Filter interface {
	isMixWhere_Filter()
}

type MixWhere_Condition struct {
	Condition *Condition `protobuf:"bytes,1,opt,name=condition,proto3,oneof"`
}

type MixWhere_Expression struct {
	Expression *Expression `protobuf:"bytes,2,opt,name=expression,proto3,oneof"` // e.g. WHERE ARRAY_CONTAINS(tags, 'urgent') => 视作 Condition.MixField.Expression
}

func (*MixWhere_Condition) isMixWhere_Filter() {}

func (*MixWhere_Expression) isMixWhere_Filter() {}

type Condition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         *MixField              `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"` // 暂时不考虑 where 1=1, where true; MixField.Expression 覆盖 WHERE ARRAY_LENGTH(my_array, 1) > 5 场景
	Args          []*BasicData           `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	Operator      Op                     `protobuf:"varint,3,opt,name=operator,proto3,enum=proto.Op" json:"operator,omitempty"`
	Logic         Logic                  `protobuf:"varint,4,opt,name=logic,proto3,enum=proto.Logic" json:"logic,omitempty"`                    // 和上一个条件的逻辑关系, 默认 and, 可选or
	Reverse       bool                   `protobuf:"varint,5,opt,name=reverse,proto3" json:"reverse,omitempty"`                                 // 是否对该条件取反(NOT)
	GroupId       string                 `protobuf:"bytes,6,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                   // 组内根据logic独立构建, 组之间是and
	UsePnt        bool                   `protobuf:"varint,7,opt,name=use_pnt,json=usePnt,proto3" json:"use_pnt,omitempty"`                     // 该条件块是否加小括号, 新增 pnt-format
	LiteralCond   *StringLiteral         `protobuf:"bytes,8,opt,name=literal_cond,json=literalCond,proto3,oneof" json:"literal_cond,omitempty"` // 如果是字面量，将不再执行 [MixField Op BasicData], 直接与其他条件逻辑与逻辑或
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Condition) Reset() {
	*x = Condition{}
	mi := &file_proto_api_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{24}
}

func (x *Condition) GetField() *MixField {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *Condition) GetArgs() []*BasicData {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Condition) GetOperator() Op {
	if x != nil {
		return x.Operator
	}
	return Op_OP_UNSPECIFIED
}

func (x *Condition) GetLogic() Logic {
	if x != nil {
		return x.Logic
	}
	return Logic_LOGIC_UNSPECIFIED
}

func (x *Condition) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *Condition) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *Condition) GetUsePnt() bool {
	if x != nil {
		return x.UsePnt
	}
	return false
}

func (x *Condition) GetLiteralCond() *StringLiteral {
	if x != nil {
		return x.LiteralCond
	}
	return nil
}

// 字符串字面量
type StringLiteral struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Literal       string                 `protobuf:"bytes,1,opt,name=literal,proto3" json:"literal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringLiteral) Reset() {
	*x = StringLiteral{}
	mi := &file_proto_api_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringLiteral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringLiteral) ProtoMessage() {}

func (x *StringLiteral) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringLiteral.ProtoReflect.Descriptor instead.
func (*StringLiteral) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{25}
}

func (x *StringLiteral) GetLiteral() string {
	if x != nil {
		return x.Literal
	}
	return ""
}

type BasicData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*BasicData_IntVal
	//	*BasicData_DoubleVal
	//	*BasicData_StrVal
	//	*BasicData_Logic
	//	*BasicData_StrLiteral
	Data          isBasicData_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BasicData) Reset() {
	*x = BasicData{}
	mi := &file_proto_api_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BasicData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicData) ProtoMessage() {}

func (x *BasicData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicData.ProtoReflect.Descriptor instead.
func (*BasicData) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{26}
}

func (x *BasicData) GetData() isBasicData_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BasicData) GetIntVal() int64 {
	if x != nil {
		if x, ok := x.Data.(*BasicData_IntVal); ok {
			return x.IntVal
		}
	}
	return 0
}

func (x *BasicData) GetDoubleVal() float64 {
	if x != nil {
		if x, ok := x.Data.(*BasicData_DoubleVal); ok {
			return x.DoubleVal
		}
	}
	return 0
}

func (x *BasicData) GetStrVal() string {
	if x != nil {
		if x, ok := x.Data.(*BasicData_StrVal); ok {
			return x.StrVal
		}
	}
	return ""
}

func (x *BasicData) GetLogic() bool {
	if x != nil {
		if x, ok := x.Data.(*BasicData_Logic); ok {
			return x.Logic
		}
	}
	return false
}

func (x *BasicData) GetStrLiteral() *StringLiteral {
	if x != nil {
		if x, ok := x.Data.(*BasicData_StrLiteral); ok {
			return x.StrLiteral
		}
	}
	return nil
}

type isBasicData_Data interface {
	isBasicData_Data()
}

type BasicData_IntVal struct {
	IntVal int64 `protobuf:"varint,1,opt,name=int_val,json=intVal,proto3,oneof"` // 覆盖 int32
}

type BasicData_DoubleVal struct {
	DoubleVal float64 `protobuf:"fixed64,2,opt,name=double_val,json=doubleVal,proto3,oneof"` // 覆盖 float
}

type BasicData_StrVal struct {
	StrVal string `protobuf:"bytes,3,opt,name=str_val,json=strVal,proto3,oneof"` // 字符串会默认加单引号
}

type BasicData_Logic struct {
	Logic bool `protobuf:"varint,4,opt,name=logic,proto3,oneof"`
}

type BasicData_StrLiteral struct {
	StrLiteral *StringLiteral `protobuf:"bytes,5,opt,name=str_literal,json=strLiteral,proto3,oneof"` // 字符串字面量不会默认加单引号
}

func (*BasicData_IntVal) isBasicData_Data() {}

func (*BasicData_DoubleVal) isBasicData_Data() {}

func (*BasicData_StrVal) isBasicData_Data() {}

func (*BasicData_Logic) isBasicData_Data() {}

func (*BasicData_StrLiteral) isBasicData_Data() {}

type BasicDataArr struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Args          []*BasicData           `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BasicDataArr) Reset() {
	*x = BasicDataArr{}
	mi := &file_proto_api_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BasicDataArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicDataArr) ProtoMessage() {}

func (x *BasicDataArr) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicDataArr.ProtoReflect.Descriptor instead.
func (*BasicDataArr) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{27}
}

func (x *BasicDataArr) GetArgs() []*BasicData {
	if x != nil {
		return x.Args
	}
	return nil
}

type TemplateArg struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*TemplateArg_IntVal
	//	*TemplateArg_DoubleVal
	//	*TemplateArg_StrVal
	//	*TemplateArg_BoolVal
	//	*TemplateArg_ValItems
	Data          isTemplateArg_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemplateArg) Reset() {
	*x = TemplateArg{}
	mi := &file_proto_api_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplateArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateArg) ProtoMessage() {}

func (x *TemplateArg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateArg.ProtoReflect.Descriptor instead.
func (*TemplateArg) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{28}
}

func (x *TemplateArg) GetData() isTemplateArg_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TemplateArg) GetIntVal() int64 {
	if x != nil {
		if x, ok := x.Data.(*TemplateArg_IntVal); ok {
			return x.IntVal
		}
	}
	return 0
}

func (x *TemplateArg) GetDoubleVal() float64 {
	if x != nil {
		if x, ok := x.Data.(*TemplateArg_DoubleVal); ok {
			return x.DoubleVal
		}
	}
	return 0
}

func (x *TemplateArg) GetStrVal() string {
	if x != nil {
		if x, ok := x.Data.(*TemplateArg_StrVal); ok {
			return x.StrVal
		}
	}
	return ""
}

func (x *TemplateArg) GetBoolVal() bool {
	if x != nil {
		if x, ok := x.Data.(*TemplateArg_BoolVal); ok {
			return x.BoolVal
		}
	}
	return false
}

func (x *TemplateArg) GetValItems() *BasicDataArr {
	if x != nil {
		if x, ok := x.Data.(*TemplateArg_ValItems); ok {
			return x.ValItems
		}
	}
	return nil
}

type isTemplateArg_Data interface {
	isTemplateArg_Data()
}

type TemplateArg_IntVal struct {
	IntVal int64 `protobuf:"varint,1,opt,name=int_val,json=intVal,proto3,oneof"` // 覆盖 int32
}

type TemplateArg_DoubleVal struct {
	DoubleVal float64 `protobuf:"fixed64,2,opt,name=double_val,json=doubleVal,proto3,oneof"` // 覆盖 float
}

type TemplateArg_StrVal struct {
	StrVal string `protobuf:"bytes,3,opt,name=str_val,json=strVal,proto3,oneof"`
}

type TemplateArg_BoolVal struct {
	BoolVal bool `protobuf:"varint,4,opt,name=bool_val,json=boolVal,proto3,oneof"`
}

type TemplateArg_ValItems struct {
	ValItems *BasicDataArr `protobuf:"bytes,5,opt,name=val_items,json=valItems,proto3,oneof"`
}

func (*TemplateArg_IntVal) isTemplateArg_Data() {}

func (*TemplateArg_DoubleVal) isTemplateArg_Data() {}

func (*TemplateArg_StrVal) isTemplateArg_Data() {}

func (*TemplateArg_BoolVal) isTemplateArg_Data() {}

func (*TemplateArg_ValItems) isTemplateArg_Data() {}

type AnalyzeTemplateRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Tmpl          string                  `protobuf:"bytes,1,opt,name=tmpl,proto3" json:"tmpl,omitempty"`
	Args          map[string]*TemplateArg `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzeTemplateRequest) Reset() {
	*x = AnalyzeTemplateRequest{}
	mi := &file_proto_api_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeTemplateRequest) ProtoMessage() {}

func (x *AnalyzeTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeTemplateRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeTemplateRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{29}
}

func (x *AnalyzeTemplateRequest) GetTmpl() string {
	if x != nil {
		return x.Tmpl
	}
	return ""
}

func (x *AnalyzeTemplateRequest) GetArgs() map[string]*TemplateArg {
	if x != nil {
		return x.Args
	}
	return nil
}

type AnalyzeAdditionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tmpl          string                 `protobuf:"bytes,1,opt,name=tmpl,proto3" json:"tmpl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzeAdditionRequest) Reset() {
	*x = AnalyzeAdditionRequest{}
	mi := &file_proto_api_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeAdditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeAdditionRequest) ProtoMessage() {}

func (x *AnalyzeAdditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_api_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeAdditionRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeAdditionRequest) Descriptor() ([]byte, []int) {
	return file_proto_api_proto_rawDescGZIP(), []int{30}
}

func (x *AnalyzeAdditionRequest) GetTmpl() string {
	if x != nil {
		return x.Tmpl
	}
	return ""
}

var File_proto_api_proto protoreflect.FileDescriptor

const file_proto_api_proto_rawDesc = "" +
	"\n" +
	"\x0fproto/api.proto\x12\x05proto\"\xa4\x01\n" +
	"\x0eCommonResponse\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x123\n" +
	"\x04data\x18\x03 \x03(\v2\x1f.proto.CommonResponse.DataEntryR\x04data\x1a7\n" +
	"\tDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x9b\x01\n" +
	"\x0eBuilderRequest\x12.\n" +
	"\bbuilders\x18\x01 \x03(\v2\x12.proto.DeepWrapperR\bbuilders\x12%\n" +
	"\x06driver\x18\x02 \x01(\x0e2\r.proto.DriverR\x06driver\x122\n" +
	"\bstrategy\x18\x03 \x01(\x0e2\x16.proto.BuilderStrategyR\bstrategy\"B\n" +
	"\vDeepWrapper\x12\x12\n" +
	"\x04deep\x18\x01 \x01(\x05R\x04deep\x12\x1f\n" +
	"\x03sql\x18\x02 \x01(\v2\r.proto.MixSqlR\x03sql\"j\n" +
	"\x06MixSql\x12+\n" +
	"\x05model\x18\x01 \x01(\v2\x13.proto.SqlReferenceH\x00R\x05model\x12,\n" +
	"\btemplate\x18\x02 \x01(\v2\x0e.proto.SqlTextH\x00R\btemplateB\x05\n" +
	"\x03ref\"\x98\x01\n" +
	"\aSqlText\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\x12,\n" +
	"\x04args\x18\x02 \x03(\v2\x18.proto.SqlText.ArgsEntryR\x04args\x1aK\n" +
	"\tArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\v2\x12.proto.TemplateArgR\x05value:\x028\x01\"\xac\x03\n" +
	"\fSqlReference\x12#\n" +
	"\x04from\x18\x01 \x01(\v2\x0f.proto.MixTableR\x04from\x12\x1f\n" +
	"\x04join\x18\x02 \x03(\v2\v.proto.JoinR\x04join\x12%\n" +
	"\x05where\x18\x03 \x03(\v2\x0f.proto.MixWhereR\x05where\x12*\n" +
	"\bgroup_by\x18\x04 \x03(\v2\x0f.proto.MixFieldR\agroupBy\x123\n" +
	"\vaggregation\x18\x05 \x03(\v2\x11.proto.ExpressionR\vaggregation\x12'\n" +
	"\x06select\x18\x06 \x03(\v2\x0f.proto.MixFieldR\x06select\x12)\n" +
	"\border_by\x18\a \x03(\v2\x0e.proto.OrderByR\aorderBy\x12'\n" +
	"\x05limit\x18\b \x01(\v2\f.proto.LimitH\x00R\x05limit\x88\x01\x01\x127\n" +
	"\vlogic_where\x18\t \x01(\v2\x11.proto.LogicGroupH\x01R\n" +
	"logicWhere\x88\x01\x01B\b\n" +
	"\x06_limitB\x0e\n" +
	"\f_logic_where\"j\n" +
	"\x05Table\x12\x1d\n" +
	"\n" +
	"table_name\x18\x01 \x01(\tR\ttableName\x12!\n" +
	"\ftable_schema\x18\x02 \x01(\tR\vtableSchema\x12\x1f\n" +
	"\vtable_alias\x18\x03 \x01(\tR\n" +
	"tableAlias\"j\n" +
	"\fLiteralTable\x125\n" +
	"\vsub_literal\x18\x01 \x01(\v2\x14.proto.StringLiteralR\n" +
	"subLiteral\x12#\n" +
	"\rliteral_alias\x18\x02 \x01(\tR\fliteralAlias\"\x7f\n" +
	"\bMixTable\x121\n" +
	"\fnormal_table\x18\x01 \x01(\v2\f.proto.TableH\x00R\vnormalTable\x12:\n" +
	"\rliteral_table\x18\x02 \x01(\v2\x13.proto.LiteralTableH\x00R\fliteralTableB\x04\n" +
	"\x02mt\"\x7f\n" +
	"\x04Join\x12#\n" +
	"\x04type\x18\x01 \x01(\x0e2\x0f.proto.JoinTypeR\x04type\x12%\n" +
	"\x05table\x18\x02 \x01(\v2\x0f.proto.MixTableR\x05table\x12+\n" +
	"\bjoinCond\x18\x03 \x03(\v2\x0f.proto.JoinCondR\bjoinCond\"i\n" +
	"\bJoinCond\x12*\n" +
	"\aonField\x18\x01 \x01(\v2\x0e.proto.OnFieldH\x00R\aonField\x12*\n" +
	"\x06onCond\x18\x02 \x01(\v2\x10.proto.ConditionH\x00R\x06onCondB\x05\n" +
	"\x03mix\"\x94\x01\n" +
	"\aOnField\x12#\n" +
	"\x04left\x18\x01 \x01(\v2\x0f.proto.MixFieldR\x04left\x12%\n" +
	"\x05right\x18\x02 \x01(\v2\x0f.proto.MixFieldR\x05right\x12\x19\n" +
	"\x02on\x18\x03 \x01(\x0e2\t.proto.OpR\x02on\x12\"\n" +
	"\x05logic\x18\x04 \x01(\x0e2\f.proto.LogicR\x05logic\"N\n" +
	"\aOrderBy\x12-\n" +
	"\tdependent\x18\x01 \x01(\v2\x0f.proto.MixFieldR\tdependent\x12\x14\n" +
	"\x05order\x18\x02 \x01(\tR\x05order\"8\n" +
	"\x05Limit\x12\x17\n" +
	"\alimit_n\x18\x01 \x01(\x05R\x06limitN\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x05R\x06offset\"\x94\x01\n" +
	"\x06Column\x12\x14\n" +
	"\x05field\x18\x01 \x01(\tR\x05field\x12\x14\n" +
	"\x05table\x18\x02 \x01(\tR\x05table\x12\x16\n" +
	"\x06schema\x18\x03 \x01(\tR\x06schema\x12\x14\n" +
	"\x05alias\x18\x04 \x01(\tR\x05alias\x12\x19\n" +
	"\bagg_able\x18\x05 \x01(\bR\aaggAble\x12\x15\n" +
	"\x06use_as\x18\x06 \x01(\bR\x05useAs\"\x87\x02\n" +
	"\n" +
	"Expression\x12\x12\n" +
	"\x04call\x18\x01 \x01(\tR\x04call\x12,\n" +
	"\tcall_type\x18\x02 \x01(\x0e2\x0f.proto.CallTypeR\bcallType\x12\"\n" +
	"\x04vars\x18\x03 \x03(\v2\x0e.proto.MixVarsR\x04vars\x12\x17\n" +
	"\acall_as\x18\x04 \x01(\tR\x06callAs\x12\x15\n" +
	"\x06use_as\x18\x05 \x01(\bR\x05useAs\x12\x17\n" +
	"\ause_pnt\x18\x06 \x01(\bR\x06usePnt\x12:\n" +
	"\vstr_literal\x18\a \x01(\v2\x14.proto.StringLiteralH\x00R\n" +
	"strLiteral\x88\x01\x01B\x0e\n" +
	"\f_str_literal\"\xff\x02\n" +
	"\aMixVars\x12'\n" +
	"\x06column\x18\x01 \x01(\v2\r.proto.ColumnH\x00R\x06column\x123\n" +
	"\n" +
	"expression\x18\x02 \x01(\v2\x11.proto.ExpressionH\x00R\n" +
	"expression\x12@\n" +
	"\x0fmulti_condition\x18\x04 \x01(\v2\x15.proto.MultiConditionH\x00R\x0emultiCondition\x12<\n" +
	"\x0flogic_condition\x18\x05 \x01(\v2\x11.proto.LogicGroupH\x00R\x0elogicCondition\x12\x1a\n" +
	"\acontext\x18\x06 \x01(\tH\x00R\acontext\x12\x18\n" +
	"\x06number\x18\a \x01(\x03H\x00R\x06number\x12\x1f\n" +
	"\n" +
	"double_num\x18\b \x01(\x01H\x00R\tdoubleNum\x127\n" +
	"\vstr_literal\x18\t \x01(\v2\x14.proto.StringLiteralH\x00R\n" +
	"strLiteralB\x06\n" +
	"\x04vars\"\x9f\x01\n" +
	"\bMixField\x12'\n" +
	"\x06column\x18\x01 \x01(\v2\r.proto.ColumnH\x00R\x06column\x123\n" +
	"\n" +
	"expression\x18\x02 \x01(\v2\x11.proto.ExpressionH\x00R\n" +
	"expression\x12.\n" +
	"\tcase_when\x18\x03 \x01(\v2\x0f.proto.CaseWhenH\x00R\bcaseWhenB\x05\n" +
	"\x03mix\"\x9d\x01\n" +
	"\bCaseWhen\x123\n" +
	"\n" +
	"conditions\x18\x01 \x03(\v2\x13.proto.CaseWhenItemR\n" +
	"conditions\x12/\n" +
	"\n" +
	"else_value\x18\x02 \x01(\v2\x10.proto.BasicDataR\telseValue\x12\x14\n" +
	"\x05alias\x18\x03 \x01(\tR\x05alias\x12\x15\n" +
	"\x06use_as\x18\x04 \x01(\bR\x05useAs\"Y\n" +
	"\fCaseWhenItem\x12#\n" +
	"\x04when\x18\x01 \x03(\v2\x0f.proto.MixWhereR\x04when\x12$\n" +
	"\x04then\x18\x02 \x01(\v2\x10.proto.BasicDataR\x04then\"A\n" +
	"\x0eMultiCondition\x12/\n" +
	"\n" +
	"conditions\x18\x01 \x03(\v2\x0f.proto.MixWhereR\n" +
	"conditions\"e\n" +
	"\tLogicNode\x12)\n" +
	"\x05group\x18\x01 \x01(\v2\x11.proto.LogicGroupH\x00R\x05group\x12%\n" +
	"\x04leaf\x18\x02 \x01(\v2\x0f.proto.MixWhereH\x00R\x04leafB\x06\n" +
	"\x04node\"w\n" +
	"\n" +
	"LogicGroup\x12\"\n" +
	"\x05logic\x18\x01 \x01(\x0e2\f.proto.LogicR\x05logic\x12,\n" +
	"\bchildren\x18\x02 \x03(\v2\x10.proto.LogicNodeR\bchildren\x12\x17\n" +
	"\ause_pnt\x18\x03 \x01(\bR\x06usePnt\"{\n" +
	"\bMixWhere\x120\n" +
	"\tcondition\x18\x01 \x01(\v2\x10.proto.ConditionH\x00R\tcondition\x123\n" +
	"\n" +
	"expression\x18\x02 \x01(\v2\x11.proto.ExpressionH\x00R\n" +
	"expressionB\b\n" +
	"\x06filter\"\xc0\x02\n" +
	"\tCondition\x12%\n" +
	"\x05field\x18\x01 \x01(\v2\x0f.proto.MixFieldR\x05field\x12$\n" +
	"\x04args\x18\x02 \x03(\v2\x10.proto.BasicDataR\x04args\x12%\n" +
	"\boperator\x18\x03 \x01(\x0e2\t.proto.OpR\boperator\x12\"\n" +
	"\x05logic\x18\x04 \x01(\x0e2\f.proto.LogicR\x05logic\x12\x18\n" +
	"\areverse\x18\x05 \x01(\bR\areverse\x12\x19\n" +
	"\bgroup_id\x18\x06 \x01(\tR\agroupId\x12\x17\n" +
	"\ause_pnt\x18\a \x01(\bR\x06usePnt\x12<\n" +
	"\fliteral_cond\x18\b \x01(\v2\x14.proto.StringLiteralH\x00R\vliteralCond\x88\x01\x01B\x0f\n" +
	"\r_literal_cond\")\n" +
	"\rStringLiteral\x12\x18\n" +
	"\aliteral\x18\x01 \x01(\tR\aliteral\"\xbb\x01\n" +
	"\tBasicData\x12\x19\n" +
	"\aint_val\x18\x01 \x01(\x03H\x00R\x06intVal\x12\x1f\n" +
	"\n" +
	"double_val\x18\x02 \x01(\x01H\x00R\tdoubleVal\x12\x19\n" +
	"\astr_val\x18\x03 \x01(\tH\x00R\x06strVal\x12\x16\n" +
	"\x05logic\x18\x04 \x01(\bH\x00R\x05logic\x127\n" +
	"\vstr_literal\x18\x05 \x01(\v2\x14.proto.StringLiteralH\x00R\n" +
	"strLiteralB\x06\n" +
	"\x04data\"4\n" +
	"\fBasicDataArr\x12$\n" +
	"\x04args\x18\x01 \x03(\v2\x10.proto.BasicDataR\x04args\"\xbd\x01\n" +
	"\vTemplateArg\x12\x19\n" +
	"\aint_val\x18\x01 \x01(\x03H\x00R\x06intVal\x12\x1f\n" +
	"\n" +
	"double_val\x18\x02 \x01(\x01H\x00R\tdoubleVal\x12\x19\n" +
	"\astr_val\x18\x03 \x01(\tH\x00R\x06strVal\x12\x1b\n" +
	"\bbool_val\x18\x04 \x01(\bH\x00R\aboolVal\x122\n" +
	"\tval_items\x18\x05 \x01(\v2\x13.proto.BasicDataArrH\x00R\bvalItemsB\x06\n" +
	"\x04data\"\xb6\x01\n" +
	"\x16AnalyzeTemplateRequest\x12\x12\n" +
	"\x04tmpl\x18\x01 \x01(\tR\x04tmpl\x12;\n" +
	"\x04args\x18\x02 \x03(\v2'.proto.AnalyzeTemplateRequest.ArgsEntryR\x04args\x1aK\n" +
	"\tArgsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\v2\x12.proto.TemplateArgR\x05value:\x028\x01\",\n" +
	"\x16AnalyzeAdditionRequest\x12\x12\n" +
	"\x04tmpl\x18\x01 \x01(\tR\x04tmpl*Y\n" +
	"\x06Driver\x12\x16\n" +
	"\x12DRIVER_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fDRIVER_POSTGRES\x10\x01\x12\x10\n" +
	"\fDRIVER_MYSQL\x10\x02\x12\x10\n" +
	"\fDRIVER_DORIS\x10\x03*n\n" +
	"\x0fBuilderStrategy\x12 \n" +
	"\x1cBUILDER_STRATEGY_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16BUILDER_STRATEGY_MODEL\x10\x01\x12\x1d\n" +
	"\x19BUILDER_STRATEGY_TEMPLATE\x10\x02*\x8f\x01\n" +
	"\bCallType\x12\x19\n" +
	"\x15CALL_TYPE_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rCALL_TYPE_AGG\x10\x01\x12\x13\n" +
	"\x0fCALL_TYPE_INNER\x10\x02\x12\x14\n" +
	"\x10CALL_TYPE_CUSTOM\x10\x03\x12\x13\n" +
	"\x0fCALL_TYPE_ARITH\x10\x04\x12\x15\n" +
	"\x11CALL_TYPE_LITERAL\x10\x05*\x8c\x01\n" +
	"\bJoinType\x12\x19\n" +
	"\x15JOIN_TYPE_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eJOIN_TYPE_LEFT\x10\x01\x12\x13\n" +
	"\x0fJOIN_TYPE_RIGHT\x10\x02\x12\x13\n" +
	"\x0fJOIN_TYPE_INNER\x10\x03\x12\x12\n" +
	"\x0eJOIN_TYPE_FULL\x10\x04\x12\x13\n" +
	"\x0fJOIN_TYPE_CROSS\x10\x05*J\n" +
	"\x05Logic\x12\x15\n" +
	"\x11LOGIC_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tLOGIC_AND\x10\x01\x12\f\n" +
	"\bLOGIC_OR\x10\x02\x12\r\n" +
	"\tLOGIC_NOT\x10\x03*\x88\x02\n" +
	"\x02Op\x12\x12\n" +
	"\x0eOP_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05OP_EQ\x10\x01\x12\n" +
	"\n" +
	"\x06OP_NEQ\x10\x02\x12\t\n" +
	"\x05OP_LT\x10\x03\x12\n" +
	"\n" +
	"\x06OP_LTE\x10\x04\x12\t\n" +
	"\x05OP_GT\x10\x05\x12\n" +
	"\n" +
	"\x06OP_GTE\x10\x06\x12\v\n" +
	"\aOP_LIKE\x10\a\x12\x0f\n" +
	"\vOP_NOT_LIKE\x10\b\x12\x12\n" +
	"\x0eOP_PREFIX_LIKE\x10\t\x12\x12\n" +
	"\x0eOP_LIKE_SUFFIX\x10\n" +
	"\x12\x0e\n" +
	"\n" +
	"OP_BETWEEN\x10\v\x12\t\n" +
	"\x05OP_IN\x10\f\x12\r\n" +
	"\tOP_NOT_IN\x10\r\x12\x0e\n" +
	"\n" +
	"OP_IS_NULL\x10\x0e\x12\x12\n" +
	"\x0eOP_IS_NOT_NULL\x10\x0f\x12\n" +
	"\n" +
	"\x06OP_AND\x10\x10\x12\t\n" +
	"\x05OP_OR\x10\x112\x96\x01\n" +
	"\rSqlBuilderApi\x12:\n" +
	"\bGenerate\x12\x15.proto.BuilderRequest\x1a\x15.proto.CommonResponse\"\x00\x12I\n" +
	"\x0fAnalyzeTemplate\x12\x1d.proto.AnalyzeTemplateRequest\x1a\x15.proto.CommonResponse\"\x00B\x0fZ\r./proto;protob\x06proto3"

var (
	file_proto_api_proto_rawDescOnce sync.Once
	file_proto_api_proto_rawDescData []byte
)

func file_proto_api_proto_rawDescGZIP() []byte {
	file_proto_api_proto_rawDescOnce.Do(func() {
		file_proto_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_api_proto_rawDesc), len(file_proto_api_proto_rawDesc)))
	})
	return file_proto_api_proto_rawDescData
}

var file_proto_api_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_proto_api_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_proto_api_proto_goTypes = []any{
	(Driver)(0),                    // 0: proto.Driver
	(BuilderStrategy)(0),           // 1: proto.BuilderStrategy
	(CallType)(0),                  // 2: proto.CallType
	(JoinType)(0),                  // 3: proto.JoinType
	(Logic)(0),                     // 4: proto.Logic
	(Op)(0),                        // 5: proto.Op
	(*CommonResponse)(nil),         // 6: proto.CommonResponse
	(*BuilderRequest)(nil),         // 7: proto.BuilderRequest
	(*DeepWrapper)(nil),            // 8: proto.DeepWrapper
	(*MixSql)(nil),                 // 9: proto.MixSql
	(*SqlText)(nil),                // 10: proto.SqlText
	(*SqlReference)(nil),           // 11: proto.SqlReference
	(*Table)(nil),                  // 12: proto.Table
	(*LiteralTable)(nil),           // 13: proto.LiteralTable
	(*MixTable)(nil),               // 14: proto.MixTable
	(*Join)(nil),                   // 15: proto.Join
	(*JoinCond)(nil),               // 16: proto.JoinCond
	(*OnField)(nil),                // 17: proto.OnField
	(*OrderBy)(nil),                // 18: proto.OrderBy
	(*Limit)(nil),                  // 19: proto.Limit
	(*Column)(nil),                 // 20: proto.Column
	(*Expression)(nil),             // 21: proto.Expression
	(*MixVars)(nil),                // 22: proto.MixVars
	(*MixField)(nil),               // 23: proto.MixField
	(*CaseWhen)(nil),               // 24: proto.CaseWhen
	(*CaseWhenItem)(nil),           // 25: proto.CaseWhenItem
	(*MultiCondition)(nil),         // 26: proto.MultiCondition
	(*LogicNode)(nil),              // 27: proto.LogicNode
	(*LogicGroup)(nil),             // 28: proto.LogicGroup
	(*MixWhere)(nil),               // 29: proto.MixWhere
	(*Condition)(nil),              // 30: proto.Condition
	(*StringLiteral)(nil),          // 31: proto.StringLiteral
	(*BasicData)(nil),              // 32: proto.BasicData
	(*BasicDataArr)(nil),           // 33: proto.BasicDataArr
	(*TemplateArg)(nil),            // 34: proto.TemplateArg
	(*AnalyzeTemplateRequest)(nil), // 35: proto.AnalyzeTemplateRequest
	(*AnalyzeAdditionRequest)(nil), // 36: proto.AnalyzeAdditionRequest
	nil,                            // 37: proto.CommonResponse.DataEntry
	nil,                            // 38: proto.SqlText.ArgsEntry
	nil,                            // 39: proto.AnalyzeTemplateRequest.ArgsEntry
}
var file_proto_api_proto_depIdxs = []int32{
	37, // 0: proto.CommonResponse.data:type_name -> proto.CommonResponse.DataEntry
	8,  // 1: proto.BuilderRequest.builders:type_name -> proto.DeepWrapper
	0,  // 2: proto.BuilderRequest.driver:type_name -> proto.Driver
	1,  // 3: proto.BuilderRequest.strategy:type_name -> proto.BuilderStrategy
	9,  // 4: proto.DeepWrapper.sql:type_name -> proto.MixSql
	11, // 5: proto.MixSql.model:type_name -> proto.SqlReference
	10, // 6: proto.MixSql.template:type_name -> proto.SqlText
	38, // 7: proto.SqlText.args:type_name -> proto.SqlText.ArgsEntry
	14, // 8: proto.SqlReference.from:type_name -> proto.MixTable
	15, // 9: proto.SqlReference.join:type_name -> proto.Join
	29, // 10: proto.SqlReference.where:type_name -> proto.MixWhere
	23, // 11: proto.SqlReference.group_by:type_name -> proto.MixField
	21, // 12: proto.SqlReference.aggregation:type_name -> proto.Expression
	23, // 13: proto.SqlReference.select:type_name -> proto.MixField
	18, // 14: proto.SqlReference.order_by:type_name -> proto.OrderBy
	19, // 15: proto.SqlReference.limit:type_name -> proto.Limit
	28, // 16: proto.SqlReference.logic_where:type_name -> proto.LogicGroup
	31, // 17: proto.LiteralTable.sub_literal:type_name -> proto.StringLiteral
	12, // 18: proto.MixTable.normal_table:type_name -> proto.Table
	13, // 19: proto.MixTable.literal_table:type_name -> proto.LiteralTable
	3,  // 20: proto.Join.type:type_name -> proto.JoinType
	14, // 21: proto.Join.table:type_name -> proto.MixTable
	16, // 22: proto.Join.joinCond:type_name -> proto.JoinCond
	17, // 23: proto.JoinCond.onField:type_name -> proto.OnField
	30, // 24: proto.JoinCond.onCond:type_name -> proto.Condition
	23, // 25: proto.OnField.left:type_name -> proto.MixField
	23, // 26: proto.OnField.right:type_name -> proto.MixField
	5,  // 27: proto.OnField.on:type_name -> proto.Op
	4,  // 28: proto.OnField.logic:type_name -> proto.Logic
	23, // 29: proto.OrderBy.dependent:type_name -> proto.MixField
	2,  // 30: proto.Expression.call_type:type_name -> proto.CallType
	22, // 31: proto.Expression.vars:type_name -> proto.MixVars
	31, // 32: proto.Expression.str_literal:type_name -> proto.StringLiteral
	20, // 33: proto.MixVars.column:type_name -> proto.Column
	21, // 34: proto.MixVars.expression:type_name -> proto.Expression
	26, // 35: proto.MixVars.multi_condition:type_name -> proto.MultiCondition
	28, // 36: proto.MixVars.logic_condition:type_name -> proto.LogicGroup
	31, // 37: proto.MixVars.str_literal:type_name -> proto.StringLiteral
	20, // 38: proto.MixField.column:type_name -> proto.Column
	21, // 39: proto.MixField.expression:type_name -> proto.Expression
	24, // 40: proto.MixField.case_when:type_name -> proto.CaseWhen
	25, // 41: proto.CaseWhen.conditions:type_name -> proto.CaseWhenItem
	32, // 42: proto.CaseWhen.else_value:type_name -> proto.BasicData
	29, // 43: proto.CaseWhenItem.when:type_name -> proto.MixWhere
	32, // 44: proto.CaseWhenItem.then:type_name -> proto.BasicData
	29, // 45: proto.MultiCondition.conditions:type_name -> proto.MixWhere
	28, // 46: proto.LogicNode.group:type_name -> proto.LogicGroup
	29, // 47: proto.LogicNode.leaf:type_name -> proto.MixWhere
	4,  // 48: proto.LogicGroup.logic:type_name -> proto.Logic
	27, // 49: proto.LogicGroup.children:type_name -> proto.LogicNode
	30, // 50: proto.MixWhere.condition:type_name -> proto.Condition
	21, // 51: proto.MixWhere.expression:type_name -> proto.Expression
	23, // 52: proto.Condition.field:type_name -> proto.MixField
	32, // 53: proto.Condition.args:type_name -> proto.BasicData
	5,  // 54: proto.Condition.operator:type_name -> proto.Op
	4,  // 55: proto.Condition.logic:type_name -> proto.Logic
	31, // 56: proto.Condition.literal_cond:type_name -> proto.StringLiteral
	31, // 57: proto.BasicData.str_literal:type_name -> proto.StringLiteral
	32, // 58: proto.BasicDataArr.args:type_name -> proto.BasicData
	33, // 59: proto.TemplateArg.val_items:type_name -> proto.BasicDataArr
	39, // 60: proto.AnalyzeTemplateRequest.args:type_name -> proto.AnalyzeTemplateRequest.ArgsEntry
	34, // 61: proto.SqlText.ArgsEntry.value:type_name -> proto.TemplateArg
	34, // 62: proto.AnalyzeTemplateRequest.ArgsEntry.value:type_name -> proto.TemplateArg
	7,  // 63: proto.SqlBuilderApi.Generate:input_type -> proto.BuilderRequest
	35, // 64: proto.SqlBuilderApi.AnalyzeTemplate:input_type -> proto.AnalyzeTemplateRequest
	6,  // 65: proto.SqlBuilderApi.Generate:output_type -> proto.CommonResponse
	6,  // 66: proto.SqlBuilderApi.AnalyzeTemplate:output_type -> proto.CommonResponse
	65, // [65:67] is the sub-list for method output_type
	63, // [63:65] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_proto_api_proto_init() }
func file_proto_api_proto_init() {
	if File_proto_api_proto != nil {
		return
	}
	file_proto_api_proto_msgTypes[3].OneofWrappers = []any{
		(*MixSql_Model)(nil),
		(*MixSql_Template)(nil),
	}
	file_proto_api_proto_msgTypes[5].OneofWrappers = []any{}
	file_proto_api_proto_msgTypes[8].OneofWrappers = []any{
		(*MixTable_NormalTable)(nil),
		(*MixTable_LiteralTable)(nil),
	}
	file_proto_api_proto_msgTypes[10].OneofWrappers = []any{
		(*JoinCond_OnField)(nil),
		(*JoinCond_OnCond)(nil),
	}
	file_proto_api_proto_msgTypes[15].OneofWrappers = []any{}
	file_proto_api_proto_msgTypes[16].OneofWrappers = []any{
		(*MixVars_Column)(nil),
		(*MixVars_Expression)(nil),
		(*MixVars_MultiCondition)(nil),
		(*MixVars_LogicCondition)(nil),
		(*MixVars_Context)(nil),
		(*MixVars_Number)(nil),
		(*MixVars_DoubleNum)(nil),
		(*MixVars_StrLiteral)(nil),
	}
	file_proto_api_proto_msgTypes[17].OneofWrappers = []any{
		(*MixField_Column)(nil),
		(*MixField_Expression)(nil),
		(*MixField_CaseWhen)(nil),
	}
	file_proto_api_proto_msgTypes[21].OneofWrappers = []any{
		(*LogicNode_Group)(nil),
		(*LogicNode_Leaf)(nil),
	}
	file_proto_api_proto_msgTypes[23].OneofWrappers = []any{
		(*MixWhere_Condition)(nil),
		(*MixWhere_Expression)(nil),
	}
	file_proto_api_proto_msgTypes[24].OneofWrappers = []any{}
	file_proto_api_proto_msgTypes[26].OneofWrappers = []any{
		(*BasicData_IntVal)(nil),
		(*BasicData_DoubleVal)(nil),
		(*BasicData_StrVal)(nil),
		(*BasicData_Logic)(nil),
		(*BasicData_StrLiteral)(nil),
	}
	file_proto_api_proto_msgTypes[28].OneofWrappers = []any{
		(*TemplateArg_IntVal)(nil),
		(*TemplateArg_DoubleVal)(nil),
		(*TemplateArg_StrVal)(nil),
		(*TemplateArg_BoolVal)(nil),
		(*TemplateArg_ValItems)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_api_proto_rawDesc), len(file_proto_api_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_api_proto_goTypes,
		DependencyIndexes: file_proto_api_proto_depIdxs,
		EnumInfos:         file_proto_api_proto_enumTypes,
		MessageInfos:      file_proto_api_proto_msgTypes,
	}.Build()
	File_proto_api_proto = out.File
	file_proto_api_proto_goTypes = nil
	file_proto_api_proto_depIdxs = nil
}
